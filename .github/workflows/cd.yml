name: CD
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-android:
    name: Release Android To AppCenter
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        Directory: [ app ]
    steps:
      - uses: actions/checkout@v2
        # Replace with your Personal Access Tokens
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: 'Install Tools'
        run: |
            ./.github/workflows/scripts/install-tools.sh

      - name: 'Bootstrap Workspace'
        run: melos bootstrap

      - name: Setup app_secrets.dart
        env:
          APP_SECRETS: ${{ secrets.APP_SECRETS }}
          APP_SECRETS_PATH: app/lib/secrets/app_secrets.dart
        run: echo -n $APP_SECRETS | base64 --decode > $APP_SECRETS_PATH

      - name: Get Dependencies
        run: melos run get

      - name: Run build_runner
        run: melos run generate

      - name: Bump Build Number
        run: scripts/bump-build-number.sh
        working-directory: app/

      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'app_key.jks'
          encodedString: ${{ secrets.KEYSTORE }}

      - name: Set Flavor Name
        run: scripts/set-flavor-and-apk-path-to-env.sh
        working-directory: app/

      - name: Build APK
        run: scripts/build.sh apk $FLAVOR_NAME --release --obfuscate --split-debug-info=debug-info
        working-directory: app/
        env:
          KEY_STORE_PATH: ${{ steps.decode_keystore.outputs.filePath }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

      #      - name: Upload Artifact to App Center
      #        uses: wzieba/AppCenter-Github-Action@v1
      #        with:
      #          appName: ANDROID-MyApp
      #          token: ${{ secrets.APP_CENTER_TOKEN }}
      #          group: Testers
      #          file: ${{ env.APK_PATH }}
      #          notifyTesters: true

      - name: Add Tag Name to ENV
        run: scripts/gh-action-read-and-set-version-env.sh
        working-directory: app/

      - name: Create Release and Add APK Artifact
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.tag_name }}
          files: |
            ${{ env.APK_PATH }}
            app/debug-info/app.android-arm.symbols
            app/debug-info/app.android-arm64.symbols
            app/debug-info/app.android-x64.symbols

  build-ios:
    name: Release iOS to TestFlight
    runs-on: macos-latest
    strategy:
      matrix:
        Directory: [ app ]
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: 'Install Tools'
        run: |
            ./.github/workflows/scripts/install-tools.sh

      - name: 'Bootstrap Workspace'
        run: melos bootstrap

      - name: Setup app_secrets.dart
        env:
          APP_SECRETS: ${{ secrets.APP_SECRETS }}
          APP_SECRETS_PATH: app/lib/secrets/app_secrets.dart
        run: echo -n $APP_SECRETS | base64 --decode > $APP_SECRETS_PATH

      - name: Get Dependencies
        run: melos run get

      - name: Run build_runner
        run: melos run generate

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Bump Build Number
        run: scripts/bump-build-number.sh
        working-directory: app/


      #      - name: Install the Apple certificate and provisioning profile
      #        env:
      #          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      #          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      #          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #        run: chmod u+x scripts/install_certs.sh && scripts/install_certs.sh

      - name: Retrieve Export-Options.plist from secrets
        env:
          PLIST: ${{ secrets.IOS_PLIST }}
          PLIST_PATH: ${{ runner.temp }}/options.plist
        run: echo -n "$PLIST" | base64 --decode --output $PLIST_PATH

#      - name: Build the signed ipa
#        run: chmod u+x scripts/build.sh && scripts/build.sh ipa prod --release
#        working-directory: app/
  #      - name: Upload the signed ipa to TestFlight
  #        env:
  #          PASSWORD: ${{ secrets.APPSTORE_PASSWORD }}
  #          IPA_PATH: build/ios/ipa/prod.ipa
  #        run: xcrun altool --upload-app --file $IPA_PATH --username "ios@neosofttech.com" --password $PASSWORD --type ios --verbose

  commit-version-update:
    name: Commit Version Change
    runs-on: ubuntu-latest
    needs: [ build-android, build-ios ]
    if: |
      always() &&
      (needs.build-android.result == 'success' || needs.build-ios.result == 'success')
    steps:
      - uses: actions/checkout@v2
        # Replace with your Personal Access Token
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump Version
        run: scripts/bump-build-number.sh
        working-directory: app/

      - name: Configure Git
        run: |
          git config user.name "Github Actions CD"
          git config user.email "<>"
      - name: Commit Version Change
        run: scripts/commit-version.sh
        working-directory: app/
