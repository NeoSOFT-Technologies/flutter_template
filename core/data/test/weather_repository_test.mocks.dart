// Mocks generated by Mockito 5.3.2 from annotations
// in data/test/weather_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:data/src/out/database_port.dart' as _i3;
import 'package:data/src/out/network_port.dart' as _i4;
import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabasePort].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabasePort extends _i1.Mock implements _i3.DatabasePort {
  MockDatabasePort() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void saveUser() => super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void fetchPosts() => super.noSuchMethod(
        Invocation.method(
          #fetchPosts,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void reload() => super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NetworkPort].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkPort extends _i1.Mock implements _i4.NetworkPort {
  MockNetworkPort() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i2.NetworkError, _i2.Location>> createLocation({
    required String? name,
    required double? lat,
    required double? lan,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createLocation,
          [],
          {
            #name: name,
            #lat: lat,
            #lan: lan,
          },
        ),
        returnValue:
            _i5.Future<_i2.Either<_i2.NetworkError, _i2.Location>>.value(
                _FakeEither_0<_i2.NetworkError, _i2.Location>(
          this,
          Invocation.method(
            #createLocation,
            [],
            {
              #name: name,
              #lat: lat,
              #lan: lan,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i2.NetworkError, _i2.Location>>);
  @override
  _i5.Future<_i2.Either<_i2.NetworkError, List<_i2.Location>>> getLocations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocations,
          [],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i2.NetworkError, List<_i2.Location>>>.value(
                _FakeEither_0<_i2.NetworkError, List<_i2.Location>>(
          this,
          Invocation.method(
            #getLocations,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i2.NetworkError, List<_i2.Location>>>);
  @override
  _i5.Future<_i2.Either<_i2.NetworkError, _i2.WeatherDetail>> getTodayTimeline(
          _i2.Location? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodayTimeline,
          [location],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i2.NetworkError, _i2.WeatherDetail>>.value(
                _FakeEither_0<_i2.NetworkError, _i2.WeatherDetail>(
          this,
          Invocation.method(
            #getTodayTimeline,
            [location],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i2.NetworkError, _i2.WeatherDetail>>);
  @override
  _i5.Future<_i2.Either<_i2.NetworkError, _i2.WeatherDetail>> getFutureTimeLine(
          _i2.Location? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFutureTimeLine,
          [location],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i2.NetworkError, _i2.WeatherDetail>>.value(
                _FakeEither_0<_i2.NetworkError, _i2.WeatherDetail>(
          this,
          Invocation.method(
            #getFutureTimeLine,
            [location],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i2.NetworkError, _i2.WeatherDetail>>);
}
